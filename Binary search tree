//Binary search tree
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
struct node
{
int data;
struct node* right;
struct node* left;
};
struct node* getnode(int data)
{
struct node* new = (struct node*) malloc ( sizeof(struct node));
new->data=data;
new->left=NULL;
new->right=NULL;
return new;
}
struct node* insert(struct node*root,int data)
{
if(root==NULL)
{
root=getnode(data);
}
else if (data <root->data)
{
root->left=insert(root->left,data);
}
else{
root->right=insert(root->right,data);
}
return root;
}
bool search (struct node* root,int data)
{
if(root==NULL)
{
return false;
}
else if(root->data==data)
{
return true;
}
else if(data<=root->data)
{
return search(root->left,data);
}
else
{
return search (root->right,data);
}}
void inorder (struct node* root)
{
if(root)
{
inorder(root->left);
printf("%d\t",root->data);
inorder (root->right);
}}
void preorder(struct node* root) {
    if (root) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void postorder(struct node* root) {
    if (root) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}
struct node* findMin(struct node* root) {
 while (root->left != NULL) {
root = root->left;
 }
 return root;
}
struct node* delete(struct node* root, int data) {
    if (root == NULL) {
        return root;
    }

    if (data < root->data) {
        root->left = delete(root->left, data);
    } else if (data > root->data) {
        root->right = delete(root->right, data);
    } else {
        // Node with no child
        if (root->left == NULL && root->right == NULL) {
            free(root);
            root = NULL;
        }
        // Node with one child
        else if (root->left == NULL) {
            struct node* temp = root;
            root = root->right;
            free(temp);
        } else if (root->right == NULL) {
            struct node*temp = root;
            root = root->left;
            free(temp);
        }
        // Node with two children
        else {
            struct node* temp = findMin(root->right);
            root->data = temp->data;
            root->right = delete(root->right, temp->data);
        }
    }
    return root;
}
int main()
{
struct node* root=NULL;
printf("insertion:");
root=insert(root,10);
root=insert(root,33);
root=insert(root,40);

printf("inorder traversal:");
inorder (root);
printf("\n");

printf("preorder traversal:");
preorder (root);
printf("\n");

printf("postorder traversal:");
postorder (root);
printf ("\n");

int n;
printf("\nenter no:");
scanf("%d",&n);

if(search(root,n)==true)
{
printf("found\n");
}
else{
printf("not found\n");
}

printf("deletion:\n");
root =delete(root, 33);

 printf("Inorder Traversal after deletion: ");
inorder(root);
 printf("\n");

 return 0;

}
